// Generated by CoffeeScript 1.8.0
(function() {
  var Bodies, Body, Common, Composite, Composites, Constraint, Engine, Game, Gui, MouseConstraint, World, _engine, _sceneHeight, _sceneName, _sceneWidth;

  Engine = Matter.Engine;

  Gui = Matter.Gui;

  World = Matter.World;

  Bodies = Matter.Bodies;

  Body = Matter.Body;

  Composite = Matter.Composite;

  Composites = Matter.Composites;

  Common = Matter.Common;

  Constraint = Matter.Constraint;

  MouseConstraint = Matter.MouseConstraint;

  Game = {};

  _engine = void 0;

  _sceneName = "mixed";

  _sceneWidth = void 0;

  _sceneHeight = void 0;

  Game.init = function() {
    var canvasContainer, demoStart;
    canvasContainer = document.getElementById("canvas-container");
    demoStart = document.getElementById("start");
    demoStart.addEventListener("click", function() {
      demoStart.style.display = "none";
      _engine = Engine.create(canvasContainer);
      Game.fullscreen();
      return setTimeout((function() {
        Engine.run(_engine);
        Game.updateScene();
      }), 800);
    });
    window.addEventListener("touchstart", Game.fullscreen);
    return window.addEventListener("touchstart", Game.action);
  };

  window.addEventListener("load", Game.init);

  Game.mixed = function() {
    return Game.reset();
  };

  Game.action = function() {
    return World.add(_engine.world, Composites.stack(0, 0, 1, 1, 0, 0, function(x, y, column, row) {
      return Bodies.rectangle(_sceneWidth * 0.5 - 20, 0, 40, 40, {
        friction: 0.01,
        restitution: 0.4
      });
    }));
  };

  Game.updateScene = function() {
    var boundsMax, canvas, renderOptions;
    if (!_engine) {
      return;
    }
    _sceneWidth = document.documentElement.clientWidth;
    _sceneHeight = document.documentElement.clientHeight;
    boundsMax = _engine.world.bounds.max;
    renderOptions = _engine.render.options;
    canvas = _engine.render.canvas;
    boundsMax.x = _sceneWidth;
    boundsMax.y = _sceneHeight;
    canvas.width = renderOptions.width = _sceneWidth;
    canvas.height = renderOptions.height = _sceneHeight;
    return Game[_sceneName]();
  };

  Game.updateGravity = function() {
    var gravity, orientation;
    if (!_engine) {
      return;
    }
    orientation = window.orientation;
    gravity = _engine.world.gravity;
    if (orientation === 0) {
      gravity.x = Common.clamp(event.gamma, -90, 90) / 90;
      return gravity.y = Common.clamp(event.beta, -90, 90) / 90;
    } else if (orientation === 180) {
      gravity.x = Common.clamp(event.gamma, -90, 90) / 90;
      return gravity.y = Common.clamp(-event.beta, -90, 90) / 90;
    } else if (orientation === 90) {
      gravity.x = Common.clamp(event.beta, -90, 90) / 90;
      return gravity.y = Common.clamp(-event.gamma, -90, 90) / 90;
    } else if (orientation === -90) {
      gravity.x = Common.clamp(-event.beta, -90, 90) / 90;
      return gravity.y = Common.clamp(event.gamma, -90, 90) / 90;
    }
  };

  Game.fullscreen = function() {
    var _fullscreenElement;
    _fullscreenElement = _engine.render.canvas;
    if (!document.fullscreenElement && !document.mozFullScreenElement && !document.webkitFullscreenElement) {
      if (_fullscreenElement.requestFullscreen) {
        return _fullscreenElement.requestFullscreen();
      } else if (_fullscreenElement.mozRequestFullScreen) {
        return _fullscreenElement.mozRequestFullScreen();
      } else {
        if (_fullscreenElement.webkitRequestFullscreen) {
          return _fullscreenElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
        }
      }
    }
  };

  Game.reset = function() {
    var offset, _world;
    _world = _engine.world;
    Common._seed = 2;
    World.clear(_world);
    Engine.clear(_engine);
    offset = 5;
    World.addBody(_world, Bodies.rectangle(_sceneWidth * 0.5, -offset, _sceneWidth + 0.5, 50.5, {
      isStatic: true
    }));
    World.addBody(_world, Bodies.rectangle(_sceneWidth * 0.5, _sceneHeight + offset, _sceneWidth + 0.5, 50.5, {
      isStatic: true
    }));
    World.addBody(_world, Bodies.rectangle(_sceneWidth + offset, _sceneHeight * 0.5, 50.5, _sceneHeight + 0.5, {
      isStatic: true
    }));
    return World.addBody(_world, Bodies.rectangle(-offset, _sceneHeight * 0.5, 50.5, _sceneHeight + 0.5, {
      isStatic: true
    }));
  };

}).call(this);

//# sourceMappingURL=roshan.js.map
