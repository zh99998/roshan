// Generated by CoffeeScript 1.8.0
(function() {
  var Bodies, Body, Bounds, Common, Composite, Composites, Constraint, Engine, Events, Game, Mouse, MouseConstraint, Query, RenderPixi, Vector, Vertices, World, _engine, _isMobile, _sceneEvents, _sceneHeight, _sceneName, _sceneWidth;

  Engine = Matter.Engine;

  World = Matter.World;

  Bodies = Matter.Bodies;

  Body = Matter.Body;

  Composite = Matter.Composite;

  Composites = Matter.Composites;

  Common = Matter.Common;

  Constraint = Matter.Constraint;

  RenderPixi = Matter.RenderPixi;

  Events = Matter.Events;

  Bounds = Matter.Bounds;

  Vector = Matter.Vector;

  Vertices = Matter.Vertices;

  MouseConstraint = Matter.MouseConstraint;

  Mouse = Matter.Mouse;

  Query = Matter.Query;

  Game = {};

  _engine = void 0;

  _sceneName = "mixed";

  _sceneWidth = void 0;

  _sceneHeight = void 0;

  _sceneEvents = [];

  _isMobile = /(ipad|iphone|ipod|android)/gi.test(navigator.userAgent);

  Game.init = function() {
    var GameStart, canvasContainer;
    canvasContainer = document.getElementById("canvas-container");
    GameStart = document.getElementById("start");
    return GameStart.addEventListener("click", function() {
      GameStart.style.display = "none";
      _engine = Engine.create(canvasContainer, {
        render: {
          options: {
            wireframes: false
          }
        }
      });
      if (_isMobile) {
        Game.fullscreen();
        new FastButton(window, Game.fullscreen);
      }
      setTimeout(function() {
        Engine.run(_engine);
        return Game.updateScene();
      }, 800);
      return new FastButton(window, Game.action);
    });
  };

  Game.mixed = function() {
    var bottom, roshan;
    Game.reset();
    roshan = Bodies.rectangle(100, _sceneHeight - 50, 200, 100, {
      friction: 0.01,
      restitution: 0.4
    });
    bottom = Bodies.rectangle(100, _sceneHeight, 200, 1, {
      isStatic: true
    });
    _sceneEvents.push(Events.on(_engine, "tick", function(event) {
      roshan.position.x = _sceneWidth / 2 + 100 * Math.sin(_engine.timing.timestamp * 0.001);
      return Body.translate(bottom, {
        x: roshan.position.x - bottom.position.x,
        y: 0
      });
    }));
    World.add(_engine.world, roshan);
    return World.add(_engine.world, bottom);
  };

  Game.action = function() {
    return World.add(_engine.world, Bodies.rectangle(_sceneWidth * 0.5, 0, 61, 52, {
      friction: 0.01,
      restitution: 0.4,
      render: {
        sprite: {
          texture: './img/block/0.png'
        }
      }
    }));
  };

  Game.updateScene = function() {
    var boundsMax, canvas, renderOptions;
    if (!_engine) {
      return;
    }
    if (_isMobile) {
      _sceneWidth = document.documentElement.clientWidth;
      _sceneHeight = document.documentElement.clientHeight;
    } else {
      _sceneWidth = 500;
      _sceneHeight = 500;
    }
    boundsMax = _engine.world.bounds.max;
    renderOptions = _engine.render.options;
    canvas = _engine.render.canvas;
    boundsMax.x = _sceneWidth;
    boundsMax.y = _sceneHeight;
    canvas.width = renderOptions.width = _sceneWidth;
    canvas.height = renderOptions.height = _sceneHeight;
    return Game[_sceneName]();
  };

  Game.updateGravity = function() {
    var gravity, orientation;
    if (!_engine) {
      return;
    }
    orientation = window.orientation;
    gravity = _engine.world.gravity;
    if (orientation === 0) {
      gravity.x = Common.clamp(event.gamma, -90, 90) / 90;
      return gravity.y = Common.clamp(event.beta, -90, 90) / 90;
    } else if (orientation === 180) {
      gravity.x = Common.clamp(event.gamma, -90, 90) / 90;
      return gravity.y = Common.clamp(-event.beta, -90, 90) / 90;
    } else if (orientation === 90) {
      gravity.x = Common.clamp(event.beta, -90, 90) / 90;
      return gravity.y = Common.clamp(-event.gamma, -90, 90) / 90;
    } else if (orientation === -90) {
      gravity.x = Common.clamp(-event.beta, -90, 90) / 90;
      return gravity.y = Common.clamp(event.gamma, -90, 90) / 90;
    }
  };

  Game.fullscreen = function() {
    var _fullscreenElement;
    _fullscreenElement = _engine.render.canvas;
    if (!document.fullscreenElement && !document.mozFullScreenElement && !document.webkitFullscreenElement) {
      if (_fullscreenElement.requestFullscreen) {
        return _fullscreenElement.requestFullscreen();
      } else if (_fullscreenElement.mozRequestFullScreen) {
        return _fullscreenElement.mozRequestFullScreen();
      } else {
        if (_fullscreenElement.webkitRequestFullscreen) {
          return _fullscreenElement.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
        }
      }
    }
  };

  Game.reset = function() {
    var _world;
    _world = _engine.world;
    Common._seed = 2;
    World.clear(_world);
    return Engine.clear(_engine);
  };

  Game.init();

}).call(this);

//# sourceMappingURL=roshan.js.map
